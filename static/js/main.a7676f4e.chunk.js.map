{"version":3,"sources":["Components/BasicCard.js","Components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["BasicCard","props","console","log","Card","className","sx","maxWidth","CardMedia","component","alt","data","name","height","image","sprites","front_default","CardContent","Typography","gutterBottom","variant","color","weight","abilities","map","item","ability","CardActions","Button","size","TablePaginationDemo","React","page","rowsPerPage","setRowsPerPage","TablePagination","count","onPageChange","event","newPage","changeOffset","onRowsPerPageChange","changeLimit","target","value","rowsPerPageOptions","App","useState","listPokemon","setListPokemon","limit","setLimit","offset","setOffset","setCount","next","setNext","prev","setPrev","useEffect","url","fetchData","a","fetch","response","json","previous","Promise","all","results","then","catch","err","error","val","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7676f4e.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardActions from \"@mui/material/CardActions\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardMedia from \"@mui/material/CardMedia\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport default function BasicCard(props) {\r\n    console.log(props)\r\n  return (\r\n    <Card className=\"flex-item\" sx={{ maxWidth: 345 }}>\r\n      <CardMedia\r\n        component=\"img\"\r\n        alt={props.data.name}\r\n        height=\"140\"\r\n        image={props.data.sprites.front_default}\r\n      />\r\n      <CardContent>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          {props.data.name}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {\"Height :\" + props.data.height}\r\n            <br/>\r\n          {\"Weight :\" + props.data.weight}\r\n\r\n          <h3>Ablity</h3>\r\n            <ul>\r\n             {props.data.abilities.map((item) => (\r\n              <li>\r\n                 {item.ability.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n         \r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button size=\"small\">Show</Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport TablePagination from '@mui/material/TablePagination';\r\n\r\nexport default function TablePaginationDemo(props) {\r\n  console.log(props)\r\n  const [page, setPage] = React.useState(10);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n        props.changeOffset(rowsPerPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n      props.changeLimit(event.target.value)\r\n      setRowsPerPage(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <TablePagination\r\n      component=\"div\"\r\n      count={props.count}\r\n      page={page}\r\n      onPageChange={handleChangePage}\r\n      onRowsPerPageChange={handleChangeRowsPerPage}\r\n      rowsPerPageOptions = {[10, 20, 50]}\r\n      rowsPerPage={rowsPerPage}\r\n    />\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport BasicCard from \"./Components/BasicCard\";\nimport TablePaginationDemo from \"./Components/Pagination\";\nfunction App() {\n  const [listPokemon, setListPokemon] = useState(\"\");\n  const [limit, setLimit] = useState(10);\n  const [offset, setOffset] = useState(0);\n  const [count, setCount] = useState(0);\n  const [next, setNext] = useState();\n  const [prev, setPrev] = useState();\n\n  const changeLimit = (limit) => {\n    setLimit(limit);\n  };\n  const changeOffset = (limit) => {\n    setOffset(limit);\n  };\n\n  useEffect(() => {\n    const url =\n      \"https://pokeapi.co/api/v2/pokemon?limit=\" + limit + \"&offset=\" + offset;\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const json = await response.json();\n\n        setCount(json.count);\n        setNext(json.next);\n        setPrev(json.previous);\n\n        Promise.all(\n          json.results.map((data) =>\n            fetch(data.url).then((response) => response.json())\n          )\n        )\n          .then((data) => {\n            setListPokemon(data);\n          })\n          .catch((err) => {\n            console.error(\"Failed to fetch one or more of these URLs:\");\n            console.log(json.results);\n            console.error(err);\n          });\n\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n    };\n    fetchData();\n  }, [limit, offset]);\n  return (\n    <>\n      <div className=\"App\">\n        {listPokemon && listPokemon.map((val) => <BasicCard data={val} />)}\n      </div>\n      <TablePaginationDemo\n        changeLimit={changeLimit}\n        changeOffset={changeOffset}\n        count={count}\n        next={next}\n        prev={prev}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}